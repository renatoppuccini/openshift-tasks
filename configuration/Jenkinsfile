//Config from file
//def mvnCmd = "mvn -s ./nexus_openshift_settings.xml"

try {
   timeout(time: 20, unit: 'MINUTES') {
      node('maven') {
          stage('Checkout Git') {
            //openshiftBuild(buildConfig: tasks, showBuildLogs: 'true')
            //checkout scm
            git 'https://github.com/renatoppuccini/openshift-tasks.git'
          }
          stage('Build Binary') {
            //openshiftDeploy(deploymentConfig: '${NAME}')
             echo "Building New Version"

            sh "mvn clean package -DskipTests"
          }
                
          //def groupId    = getGroupIdFromPom("pom.xml")
          //def artifactId = getArtifactIdFromPom("pom.xml")
          //def version = getVersionFromPom("pom.xml")
          
          stage('Build OpenShift Image') {
               
                
                def newTag = "TestingCandidate"
                echo "New Tag: ${newTag}"
            
                // Copy the war file we just built and rename to ROOT.war
                sh "cp ./target/openshift-tasks.war ./ROOT.war"
            
                // Start Binary Build in OpenShift using the file we just published
                // Replace shared-tasks-dev with the name of your dev project
                //sh "oc project shared-tasks-dev"
                sh "oc start-build openshift-tasks --follow --from-file=./ROOT.war"
            
                openshiftTag alias: 'false', destStream: 'tasks', destTag: newTag, destinationNamespace: 'tasks', namespace: 'tasks', srcStream: 'openshift-tasks', srcTag: 'latest', verbose: 'false'
            }
           stage('Deploy App') {
            //openshiftDeploy(deploymentConfig: '${NAME}')
             echo "Deploying New Version"

               sh "oc patch dc openshift-tasks --patch '{\"spec\": { \"triggers\": [ { \"type\": \"ImageChange\", \"imageChangeParams\": { \"containerNames\": [ \"openshift-tasks\" ], \"from\": { \"kind\": \"ImageStreamTag\", \"namespace\": \"tasks\", \"name\": \"tasks:TestingCandidate\"}}}]}}' -n tasks"

               openshiftDeploy depCfg: 'openshift-tasks', namespace: 'tasks', verbose: 'false', waitTime: '', waitUnit: 'sec'
               openshiftVerifyDeployment depCfg: 'openshift-tasks', namespace: 'tasks', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
               openshiftVerifyService namespace: 'tasks', svcName: 'openshift-tasks', verbose: 'false'
          }
        }
   }
} catch (err) {
   echo "in catch block"
   echo "Caught: ${err}"
   currentBuild.result = 'FAILURE'
   throw err
}          
